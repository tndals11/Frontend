// # === JS의 객체 === //

// ! 객체란 ?
// 관련된 데이터와 함수를 모아놓은 집합
// - 데이터 : 프로퍼티 (속성)
// - 함수 : 메서드 (기능, 행위)

// cf) 객체 지향 프로그래밍
//    : 실세계의 모든 것을 '객체'로 표현
//    > 데이터 뿐만 아니라 개발 프로세스 자체를 객체로 구성

// ! 객체의 특징
// : (참조) 데이터 타입 중 하나, 다양한 값을 담을 수 있는 컨테이너 

// cf) 배열도 객체의 한 종류
//    > 객체에 여러 데이터를 '순차적'으로 '인덱스'를 부여한 타입

console.log(typeof([1, 2, 3])); // object

// ! 객체의 구조
// : 고유한 특성(프로퍼티)과 동작(메서드)를 가짐

// ? '사람'이라는 객체 정의

// - 특성(속성, 프로퍼티) : 변수 선언 -
// : 객체가 가진 데이터(값)
// - 객체를 구성하는 정보의 일부, 상태를 나타냄
// >> 이름, 나이, 성별, 직업, 주민등록번호, 키 등

// - 기능(동작, 메서드) : 함수 선언 -
// : 객체가 수행할 수 있는 행동이나 기능 정의
// : 속성을 활용하거나 조작 가능 
// >> 공부하다, 먹다, 걷다, 말하다 등

// ? '자동차'라는 객체 정의
// - 속성
//    모델명: 'kia k9' / 색상 : 'Black' / 연식 : 2025 / 현재 속도 : 0
// - 기능
//    가속하다 : '현재 속도 증가' / 정지하다 : '차량을 정지' / 경적을 울리다 : '경적을 울림'

// ! 객체의 기본 형태

/*
  변수종류 객체명 = {
    ... 속성과 메서드 작성
  }

  >> 객체의 경우 {} 중괄호가 해당 변수의 종류를 나타내어 ; 생략

  cf) 배열
    변수종류 배열명 = {};

  +) 값의 데이터 형식에 제한 x
    : 배열, 또 다른 객체, 함수 가능
    
  +) 키와 값의 쌍으로 나열, 쌍의 분리는 ,(콤마) 사용
  
  +) 각각의 멤버(키, 값)는 콜론(:)으로 분리
*/

let hgd = ['홍', '길동', '169'];

// ! 1. 객체 리터럴 방식
// : 가장 간단하고 직관적인 객체 생성 방식
// - 중괄호를 사용하여 객체를 선언하고 초기화 (내부에 속성과 메서드 정의)

let hgd2 = {
  // 키 : 값 (키는 문자열로 작성 - 따옴표는 생략)
  lastName : '홍',
  firstName : '길동',
  height : 169,
  hobby : ['야구 시청', '운동']
}

let hgd3 = {
  lastName : '이',
  firstName : '길동'
}

// ! 2. '생성자 함수 + new' 사용 방식
// : new 키워드와 함께 '사용자 정의 생성자 함수'를 사용하여 객체 생성
// - 같은 형태(구조)의 객체를 여러 개 생성 가능
// - 함수 내부에서 this 키워드를 사용하여 객체의 속성(프로퍼티) 정의

// cf) 생성자 함수는 UpperCamelCase 사용 권장
//      : 객체 생성을 위한 함수임을 명확하게 지정 

function Human(nameParam, ageParam) {
  //? : this 키워드
  // : 해당 생성자 함수로 생성되는 객체 그 자체
  // - 각 개체마다 값이 달라짐

  // this는 현재 객체 그 자체
  // : 좌항의 .name / .age와 같이 해당 객체 내의 속성에 접근하려고 할 때
  //    , 해당 필드(프로퍼티)가 생성
  this.name = nameParam;
  this.age = ageParam;

  // 좌항의 .greet와 같이 해당 객체의 행위에 접근할 때, 해당 함수가 호출됨 
  this.greet = function() {
    console.log(`Hello, ${this.name}`);
  }
}

// 변수종류 변수명 = new 생성자함수명(파라미터 전달);
let person1 = new Human('홍길동', 26);
let person2 = new Human('이길동', 50);
let person3 = new Human('삼길동', 12);

person1.greet(); // Hello, 홍길동
person2.greet(); // Hello, 이길동
person3.greet(); // Hello, 삼길동

console.log(person1.name); // 홍길동
console.log(person1.age); // 26
